@import "../lib/helpers.cocoascript";

const LOGOS_API_BASE_URL = 'https://logos-api.funkreich.de/';

function placeSVGLogo(context) {
  var doc = context.document;

  var Helpers = HelperLibrary(context);

  /**
   * Search logos for given query string
   */
  function searchLogos(query) {
    if (!query) return [];

    var searchURL = [NSURL URLWithString:LOGOS_API_BASE_URL + '?q=' + query];
    var request = [NSURLRequest requestWithURL:searchURL];
    var data = NSURLConnection.sendSynchronousRequest_returningResponse_error(request, null, null);
    var logos;
    try {
      var response = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding]];
      logos = JSON.parse(response);
    }
    catch(err) {
      [doc showMessage:'Oops, the logos API returned unparseable data.'];
      log(err);
    }
    return logos;
  }

  function selectLogo(logos) {
    if (!logos || logos.length == 0) return;
    var options = logos.map(function(logo) {
      return logo.name + ' (' + logo.source + ')';
    });
    var choice = Helpers.createSelect(
      options.length + ' logo(s) found:',
      options,
      0
    );
    if (choice === undefined) return;
    return logos[choice];
  }

  /**
   * Places logo from given url on the canvas
   */
  function placeLogo(logoURL, selectedShape, options) {
    var request = [NSURLRequest requestWithURL:logoURL];
    var response = NSURLConnection.sendSynchronousRequest_returningResponse_error(request, null, null);

    if (response.length() == 0) {
      [doc showMessage:'No logo with shortname "' + shortname + '" found.'];
    }
    else {
      var selectedFrame = selectedShape.frame();
      var svgImporter = MSSVGImporter.svgImporter();
      svgImporter.prepareToImportFromURL(logoURL);
      var importedSVGLayer = svgImporter.importAsLayer();
      importedSVGLayer.name = options.name || shortname;

      // Scale SVG to selection frame
      var svgFrame = importedSVGLayer.frame();
      var ratio = svgFrame.width() / svgFrame.height();
      var newWidth = selectedFrame.width();
      var newHeight = newWidth / ratio;
      if (newHeight > selectedFrame.height()) {
        newHeight = selectedFrame.height();
        newWidth = newHeight * ratio;
      }

      // Center in selection frame
      [svgFrame setX:selectedFrame.x() + selectedFrame.width() / 2 - newWidth / 2];
      [svgFrame setY:selectedFrame.y() + selectedFrame.height() / 2 - newHeight / 2];
      [svgFrame setWidth:newWidth];
      [svgFrame setHeight:newHeight];

      // Add label layer
      var page = doc.currentPage();
      var canvas = page.currentArtboard() || page;
      canvas.addLayers([importedSVGLayer]);

      // Remove selection frame
      selectedShape.removeFromParent();
    }
  }

  /**
   * Queries the user for a logo search string.
   */
  function askForLogo() {
    return [doc askForUserInput:"Logo to search for (e.g. google; blank for all):" initialValue:""];
  }

  /**
   * Main entry point
   */
  function run() {
    var selectedShape = Helpers.selectedShape();
    if (!selectedShape) return;

    var query = askForLogo();
    if (!query) return;

    var logos = searchLogos(query);
    if (logos.length == 0) {
      [doc showMessage:'Sorry, no logos matching your query were found.'];
      return;
    }

    var logo = selectLogo(logos);
    if (!logo) return;

    placeLogo([NSURL URLWithString:logo.logoURL], selectedShape, {
      name: "(Logo) " + logo.name
    });
  }

  run();
}
